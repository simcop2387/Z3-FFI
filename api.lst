Z3_fixedpoint Z3_API Z3_mk_fixedpoint(Z3_context c);
void Z3_API Z3_fixedpoint_inc_ref(Z3_context c, Z3_fixedpoint d);
void Z3_API Z3_fixedpoint_dec_ref(Z3_context c, Z3_fixedpoint d);
void Z3_API Z3_fixedpoint_add_rule(Z3_context c, Z3_fixedpoint d, Z3_ast rule, Z3_symbol name);
void Z3_API Z3_fixedpoint_add_fact(Z3_context c, Z3_fixedpoint d, Z3_func_decl r, unsigned num_args, unsigned args[]);
void Z3_API Z3_fixedpoint_assert(Z3_context c, Z3_fixedpoint d, Z3_ast axiom);
Z3_lbool Z3_API Z3_fixedpoint_query(Z3_context c, Z3_fixedpoint d, Z3_ast query);
Z3_lbool Z3_API Z3_fixedpoint_query_relations(Z3_context c, Z3_fixedpoint d, unsigned num_relations, Z3_func_decl const relations[]);
Z3_ast Z3_API Z3_fixedpoint_get_answer(Z3_context c, Z3_fixedpoint d);
Z3_string Z3_API Z3_fixedpoint_get_reason_unknown(Z3_context c, Z3_fixedpoint d);
void Z3_API Z3_fixedpoint_update_rule(Z3_context c, Z3_fixedpoint d, Z3_ast a, Z3_symbol name);
unsigned Z3_API Z3_fixedpoint_get_num_levels(Z3_context c, Z3_fixedpoint d, Z3_func_decl pred);
Z3_ast Z3_API Z3_fixedpoint_get_cover_delta(Z3_context c, Z3_fixedpoint d, int level, Z3_func_decl pred);
void Z3_API Z3_fixedpoint_add_cover(Z3_context c, Z3_fixedpoint d, int level, Z3_func_decl pred, Z3_ast property);
Z3_stats Z3_API Z3_fixedpoint_get_statistics(Z3_context c, Z3_fixedpoint d);
void Z3_API Z3_fixedpoint_register_relation(Z3_context c, Z3_fixedpoint d, Z3_func_decl f);
void Z3_API Z3_fixedpoint_set_predicate_representation(Z3_context c, Z3_fixedpoint d, Z3_func_decl f, unsigned num_relations, Z3_symbol const relation_kinds[]);
Z3_ast_vector Z3_API Z3_fixedpoint_get_rules(Z3_context c, Z3_fixedpoint f);
Z3_ast_vector Z3_API Z3_fixedpoint_get_assertions(Z3_context c, Z3_fixedpoint f);
void Z3_API Z3_fixedpoint_set_params(Z3_context c, Z3_fixedpoint f, Z3_params p);
Z3_string Z3_API Z3_fixedpoint_get_help(Z3_context c, Z3_fixedpoint f);
Z3_param_descrs Z3_API Z3_fixedpoint_get_param_descrs(Z3_context c, Z3_fixedpoint f);
Z3_string Z3_API Z3_fixedpoint_to_string(Z3_context c, Z3_fixedpoint f, unsigned num_queries, Z3_ast queries[]);
Z3_ast_vector Z3_API Z3_fixedpoint_from_string(Z3_context c, Z3_fixedpoint f, Z3_string s);
Z3_ast_vector Z3_API Z3_fixedpoint_from_file(Z3_context c, Z3_fixedpoint f, Z3_string s);
void Z3_API Z3_fixedpoint_push(Z3_context c, Z3_fixedpoint d);
void Z3_API Z3_fixedpoint_pop(Z3_context c, Z3_fixedpoint d);
void Z3_API Z3_fixedpoint_init(Z3_context c, Z3_fixedpoint d, void* state);
void Z3_API Z3_fixedpoint_set_reduce_assign_callback(Z3_context c, Z3_fixedpoint d, Z3_fixedpoint_reduce_assign_callback_fptr cb);
void Z3_API Z3_fixedpoint_set_reduce_app_callback(Z3_context c, Z3_fixedpoint d, Z3_fixedpoint_reduce_app_callback_fptr cb);
void Z3_API Z3_fixedpoint_add_callback(Z3_context ctx, Z3_fixedpoint f, void *state, Z3_fixedpoint_new_lemma_eh new_lemma_eh, Z3_fixedpoint_predecessor_eh predecessor_eh, Z3_fixedpoint_unfold_eh unfold_eh);
void Z3_API Z3_fixedpoint_add_constraint (Z3_context c, Z3_fixedpoint d, Z3_ast e, unsigned lvl);
Z3_lbool Z3_API Z3_fixedpoint_query_from_lvl (Z3_context c, Z3_fixedpoint d, Z3_ast query, unsigned lvl);
Z3_ast Z3_API Z3_fixedpoint_get_ground_sat_answer(Z3_context c, Z3_fixedpoint d);
Z3_ast_vector Z3_API Z3_fixedpoint_get_rules_along_trace(Z3_context c, Z3_fixedpoint d);
Z3_symbol Z3_API Z3_fixedpoint_get_rule_names_along_trace(Z3_context c, Z3_fixedpoint d);
void Z3_API Z3_fixedpoint_add_invariant(Z3_context c, Z3_fixedpoint d, Z3_func_decl pred, Z3_ast property);
Z3_ast Z3_API Z3_fixedpoint_get_reachable(Z3_context c, Z3_fixedpoint d, Z3_func_decl pred);
Z3_ast Z3_API Z3_qe_model_project(Z3_context c, Z3_model m, unsigned num_bounds, Z3_app const bound[], Z3_ast body);
Z3_ast Z3_API Z3_qe_model_project_skolem(Z3_context c, Z3_model m, unsigned num_bounds, Z3_app const bound[], Z3_ast body, Z3_ast_map map);
Z3_ast Z3_API Z3_model_extrapolate (Z3_context c, Z3_model m, Z3_ast fml);
Z3_ast Z3_API Z3_qe_lite (Z3_context c, Z3_ast_vector vars, Z3_ast body);
Z3_ast_vector Z3_API Z3_polynomial_subresultants(Z3_context c, Z3_ast p, Z3_ast q, Z3_ast x);
void Z3_API Z3_global_param_set(Z3_string param_id, Z3_string param_value);
void Z3_API Z3_global_param_reset_all(void);
Z3_bool_opt Z3_API Z3_global_param_get(Z3_string param_id, Z3_string_ptr param_value);
Z3_config Z3_API Z3_mk_config(void);
void Z3_API Z3_del_config(Z3_config c);
void Z3_API Z3_set_param_value(Z3_config c, Z3_string param_id, Z3_string param_value);
Z3_context Z3_API Z3_mk_context(Z3_config c);
Z3_context Z3_API Z3_mk_context_rc(Z3_config c);
void Z3_API Z3_del_context(Z3_context c);
void Z3_API Z3_inc_ref(Z3_context c, Z3_ast a);
void Z3_API Z3_dec_ref(Z3_context c, Z3_ast a);
void Z3_API Z3_update_param_value(Z3_context c, Z3_string param_id, Z3_string param_value);
void Z3_API Z3_interrupt(Z3_context c);
Z3_params Z3_API Z3_mk_params(Z3_context c);
void Z3_API Z3_params_inc_ref(Z3_context c, Z3_params p);
void Z3_API Z3_params_dec_ref(Z3_context c, Z3_params p);
void Z3_API Z3_params_set_bool(Z3_context c, Z3_params p, Z3_symbol k, bool v);
void Z3_API Z3_params_set_uint(Z3_context c, Z3_params p, Z3_symbol k, unsigned v);
void Z3_API Z3_params_set_double(Z3_context c, Z3_params p, Z3_symbol k, double v);
void Z3_API Z3_params_set_symbol(Z3_context c, Z3_params p, Z3_symbol k, Z3_symbol v);
Z3_string Z3_API Z3_params_to_string(Z3_context c, Z3_params p);
void Z3_API Z3_params_validate(Z3_context c, Z3_params p, Z3_param_descrs d);
void Z3_API Z3_param_descrs_inc_ref(Z3_context c, Z3_param_descrs p);
void Z3_API Z3_param_descrs_dec_ref(Z3_context c, Z3_param_descrs p);
Z3_param_kind Z3_API Z3_param_descrs_get_kind(Z3_context c, Z3_param_descrs p, Z3_symbol n);
unsigned Z3_API Z3_param_descrs_size(Z3_context c, Z3_param_descrs p);
Z3_symbol Z3_API Z3_param_descrs_get_name(Z3_context c, Z3_param_descrs p, unsigned i);
Z3_string Z3_API Z3_param_descrs_get_documentation(Z3_context c, Z3_param_descrs p, Z3_symbol s);
Z3_string Z3_API Z3_param_descrs_to_string(Z3_context c, Z3_param_descrs p);
Z3_symbol Z3_API Z3_mk_int_symbol(Z3_context c, int i);
Z3_symbol Z3_API Z3_mk_string_symbol(Z3_context c, Z3_string s);
Z3_sort Z3_API Z3_mk_uninterpreted_sort(Z3_context c, Z3_symbol s);
Z3_sort Z3_API Z3_mk_bool_sort(Z3_context c);
Z3_sort Z3_API Z3_mk_int_sort(Z3_context c);
Z3_sort Z3_API Z3_mk_real_sort(Z3_context c);
Z3_sort Z3_API Z3_mk_bv_sort(Z3_context c, unsigned sz);
Z3_sort Z3_API Z3_mk_finite_domain_sort(Z3_context c, Z3_symbol name, uint64_t size);
Z3_sort Z3_API Z3_mk_array_sort(Z3_context c, Z3_sort domain, Z3_sort range);
Z3_sort Z3_API Z3_mk_array_sort_n(Z3_context c, unsigned n, Z3_sort const * domain, Z3_sort range);
Z3_sort Z3_API Z3_mk_tuple_sort(Z3_context c, Z3_symbol mk_tuple_name, unsigned num_fields, Z3_symbol const field_names[], Z3_sort const field_sorts[], Z3_func_decl * mk_tuple_decl, Z3_func_decl proj_decl[]);
Z3_sort Z3_API Z3_mk_enumeration_sort(Z3_context c, Z3_symbol name, unsigned n, Z3_symbol const enum_names[], Z3_func_decl enum_consts[], Z3_func_decl enum_testers[]);
Z3_sort Z3_API Z3_mk_list_sort(Z3_context c, Z3_symbol name, Z3_sort elem_sort, Z3_func_decl* nil_decl, Z3_func_decl* is_nil_decl, Z3_func_decl* cons_decl, Z3_func_decl* is_cons_decl, Z3_func_decl* head_decl, Z3_func_decl* tail_decl );
Z3_constructor Z3_API Z3_mk_constructor(Z3_context c, Z3_symbol name, Z3_symbol recognizer, unsigned num_fields, Z3_symbol const field_names[], Z3_sort_opt const sorts[], unsigned sort_refs[] );
void Z3_API Z3_del_constructor(Z3_context c, Z3_constructor constr);
Z3_sort Z3_API Z3_mk_datatype(Z3_context c, Z3_symbol name, unsigned num_constructors, Z3_constructor constructors[]);
Z3_constructor_list Z3_API Z3_mk_constructor_list(Z3_context c, unsigned num_constructors, Z3_constructor const constructors[]);
void Z3_API Z3_del_constructor_list(Z3_context c, Z3_constructor_list clist);
void Z3_API Z3_mk_datatypes(Z3_context c, unsigned num_sorts, Z3_symbol const sort_names[], Z3_sort sorts[], Z3_constructor_list constructor_lists[]);
void Z3_API Z3_query_constructor(Z3_context c, Z3_constructor constr, unsigned num_fields, Z3_func_decl* constructor, Z3_func_decl* tester, Z3_func_decl accessors[]);
Z3_func_decl Z3_API Z3_mk_func_decl(Z3_context c, Z3_symbol s, unsigned domain_size, Z3_sort const domain[], Z3_sort range);
Z3_ast Z3_API Z3_mk_app( Z3_context c, Z3_func_decl d, unsigned num_args, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_const(Z3_context c, Z3_symbol s, Z3_sort ty);
Z3_func_decl Z3_API Z3_mk_fresh_func_decl(Z3_context c, Z3_string prefix, unsigned domain_size, Z3_sort const domain[], Z3_sort range);
Z3_ast Z3_API Z3_mk_fresh_const(Z3_context c, Z3_string prefix, Z3_sort ty);
Z3_func_decl Z3_API Z3_mk_rec_func_decl(Z3_context c, Z3_symbol s, unsigned domain_size, Z3_sort const domain[], Z3_sort range);
void Z3_API Z3_add_rec_def(Z3_context c, Z3_func_decl f, unsigned n, Z3_ast args[], Z3_ast body);
Z3_ast Z3_API Z3_mk_true(Z3_context c);
Z3_ast Z3_API Z3_mk_false(Z3_context c);
Z3_ast Z3_API Z3_mk_eq(Z3_context c, Z3_ast l, Z3_ast r);
Z3_ast Z3_API Z3_mk_distinct(Z3_context c, unsigned num_args, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_not(Z3_context c, Z3_ast a);
Z3_ast Z3_API Z3_mk_ite(Z3_context c, Z3_ast t1, Z3_ast t2, Z3_ast t3);
Z3_ast Z3_API Z3_mk_iff(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_implies(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_xor(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_and(Z3_context c, unsigned num_args, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_or(Z3_context c, unsigned num_args, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_add(Z3_context c, unsigned num_args, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_mul(Z3_context c, unsigned num_args, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_sub(Z3_context c, unsigned num_args, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_unary_minus(Z3_context c, Z3_ast arg);
Z3_ast Z3_API Z3_mk_div(Z3_context c, Z3_ast arg1, Z3_ast arg2);
Z3_ast Z3_API Z3_mk_mod(Z3_context c, Z3_ast arg1, Z3_ast arg2);
Z3_ast Z3_API Z3_mk_rem(Z3_context c, Z3_ast arg1, Z3_ast arg2);
Z3_ast Z3_API Z3_mk_power(Z3_context c, Z3_ast arg1, Z3_ast arg2);
Z3_ast Z3_API Z3_mk_lt(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_le(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_gt(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_ge(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_int2real(Z3_context c, Z3_ast t1);
Z3_ast Z3_API Z3_mk_real2int(Z3_context c, Z3_ast t1);
Z3_ast Z3_API Z3_mk_is_int(Z3_context c, Z3_ast t1);
Z3_ast Z3_API Z3_mk_bvnot(Z3_context c, Z3_ast t1);
Z3_ast Z3_API Z3_mk_bvredand(Z3_context c, Z3_ast t1);
Z3_ast Z3_API Z3_mk_bvredor(Z3_context c, Z3_ast t1);
Z3_ast Z3_API Z3_mk_bvand(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvor(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvxor(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvnand(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvnor(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvxnor(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvneg(Z3_context c, Z3_ast t1);
Z3_ast Z3_API Z3_mk_bvadd(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvsub(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvmul(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvudiv(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvsdiv(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvurem(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvsrem(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvsmod(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvult(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvslt(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvule(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvsle(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvuge(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvsge(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvugt(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvsgt(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_concat(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_extract(Z3_context c, unsigned high, unsigned low, Z3_ast t1);
Z3_ast Z3_API Z3_mk_sign_ext(Z3_context c, unsigned i, Z3_ast t1);
Z3_ast Z3_API Z3_mk_zero_ext(Z3_context c, unsigned i, Z3_ast t1);
Z3_ast Z3_API Z3_mk_repeat(Z3_context c, unsigned i, Z3_ast t1);
Z3_ast Z3_API Z3_mk_bvshl(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvlshr(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvashr(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_rotate_left(Z3_context c, unsigned i, Z3_ast t1);
Z3_ast Z3_API Z3_mk_rotate_right(Z3_context c, unsigned i, Z3_ast t1);
Z3_ast Z3_API Z3_mk_ext_rotate_left(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_ext_rotate_right(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_int2bv(Z3_context c, unsigned n, Z3_ast t1);
Z3_ast Z3_API Z3_mk_bv2int(Z3_context c, Z3_ast t1, bool is_signed);
Z3_ast Z3_API Z3_mk_bvadd_no_overflow(Z3_context c, Z3_ast t1, Z3_ast t2, bool is_signed);
Z3_ast Z3_API Z3_mk_bvadd_no_underflow(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvsub_no_overflow(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvsub_no_underflow(Z3_context c, Z3_ast t1, Z3_ast t2, bool is_signed);
Z3_ast Z3_API Z3_mk_bvsdiv_no_overflow(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_bvneg_no_overflow(Z3_context c, Z3_ast t1);
Z3_ast Z3_API Z3_mk_bvmul_no_overflow(Z3_context c, Z3_ast t1, Z3_ast t2, bool is_signed);
Z3_ast Z3_API Z3_mk_bvmul_no_underflow(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_select(Z3_context c, Z3_ast a, Z3_ast i);
Z3_ast Z3_API Z3_mk_select_n(Z3_context c, Z3_ast a, unsigned n, Z3_ast const* idxs);
Z3_ast Z3_API Z3_mk_store(Z3_context c, Z3_ast a, Z3_ast i, Z3_ast v);
Z3_ast Z3_API Z3_mk_store_n(Z3_context c, Z3_ast a, unsigned n, Z3_ast const* idxs, Z3_ast v);
Z3_ast Z3_API Z3_mk_const_array(Z3_context c, Z3_sort domain, Z3_ast v);
Z3_ast Z3_API Z3_mk_map(Z3_context c, Z3_func_decl f, unsigned n, Z3_ast const* args);
Z3_ast Z3_API Z3_mk_array_default(Z3_context c, Z3_ast array);
Z3_ast Z3_API Z3_mk_as_array(Z3_context c, Z3_func_decl f);
Z3_sort Z3_API Z3_mk_set_sort(Z3_context c, Z3_sort ty);
Z3_ast Z3_API Z3_mk_empty_set(Z3_context c, Z3_sort domain);
Z3_ast Z3_API Z3_mk_full_set(Z3_context c, Z3_sort domain);
Z3_ast Z3_API Z3_mk_set_add(Z3_context c, Z3_ast set, Z3_ast elem);
Z3_ast Z3_API Z3_mk_set_del(Z3_context c, Z3_ast set, Z3_ast elem);
Z3_ast Z3_API Z3_mk_set_union(Z3_context c, unsigned num_args, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_set_intersect(Z3_context c, unsigned num_args, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_set_difference(Z3_context c, Z3_ast arg1, Z3_ast arg2);
Z3_ast Z3_API Z3_mk_set_complement(Z3_context c, Z3_ast arg);
Z3_ast Z3_API Z3_mk_set_member(Z3_context c, Z3_ast elem, Z3_ast set);
Z3_ast Z3_API Z3_mk_set_subset(Z3_context c, Z3_ast arg1, Z3_ast arg2);
Z3_ast Z3_API Z3_mk_array_ext(Z3_context c, Z3_ast arg1, Z3_ast arg2);
Z3_ast Z3_API Z3_mk_numeral(Z3_context c, Z3_string numeral, Z3_sort ty);
Z3_ast Z3_API Z3_mk_real(Z3_context c, int num, int den);
Z3_ast Z3_API Z3_mk_int(Z3_context c, int v, Z3_sort ty);
Z3_ast Z3_API Z3_mk_unsigned_int(Z3_context c, unsigned v, Z3_sort ty);
Z3_ast Z3_API Z3_mk_int64(Z3_context c, int64_t v, Z3_sort ty);
Z3_ast Z3_API Z3_mk_unsigned_int64(Z3_context c, uint64_t v, Z3_sort ty);
Z3_ast Z3_API Z3_mk_bv_numeral(Z3_context c, unsigned sz, bool const* bits);
Z3_sort Z3_API Z3_mk_seq_sort(Z3_context c, Z3_sort s);
bool Z3_API Z3_is_seq_sort(Z3_context c, Z3_sort s);
Z3_sort Z3_API Z3_mk_re_sort(Z3_context c, Z3_sort seq);
bool Z3_API Z3_is_re_sort(Z3_context c, Z3_sort s);
Z3_sort Z3_API Z3_mk_string_sort(Z3_context c);
bool Z3_API Z3_is_string_sort(Z3_context c, Z3_sort s);
Z3_ast Z3_API Z3_mk_string(Z3_context c, Z3_string s);
bool Z3_API Z3_is_string(Z3_context c, Z3_ast s);
Z3_string Z3_API Z3_get_string(Z3_context c, Z3_ast s);
Z3_ast Z3_API Z3_mk_seq_empty(Z3_context c, Z3_sort seq);
Z3_ast Z3_API Z3_mk_seq_unit(Z3_context c, Z3_ast a);
Z3_ast Z3_API Z3_mk_seq_concat(Z3_context c, unsigned n, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_seq_prefix(Z3_context c, Z3_ast prefix, Z3_ast s);
Z3_ast Z3_API Z3_mk_seq_suffix(Z3_context c, Z3_ast suffix, Z3_ast s);
Z3_ast Z3_API Z3_mk_seq_contains(Z3_context c, Z3_ast container, Z3_ast containee);
Z3_ast Z3_API Z3_mk_seq_extract(Z3_context c, Z3_ast s, Z3_ast offset, Z3_ast length);
Z3_ast Z3_API Z3_mk_seq_replace(Z3_context c, Z3_ast s, Z3_ast src, Z3_ast dst);
Z3_ast Z3_API Z3_mk_seq_at(Z3_context c, Z3_ast s, Z3_ast index);
Z3_ast Z3_API Z3_mk_seq_length(Z3_context c, Z3_ast s);
Z3_ast Z3_API Z3_mk_seq_index(Z3_context c, Z3_ast s, Z3_ast substr, Z3_ast offset);
Z3_ast Z3_API Z3_mk_str_to_int(Z3_context c, Z3_ast s);
Z3_ast Z3_API Z3_mk_int_to_str(Z3_context c, Z3_ast s);
Z3_ast Z3_API Z3_mk_seq_to_re(Z3_context c, Z3_ast seq);
Z3_ast Z3_API Z3_mk_seq_in_re(Z3_context c, Z3_ast seq, Z3_ast re);
Z3_ast Z3_API Z3_mk_re_plus(Z3_context c, Z3_ast re);
Z3_ast Z3_API Z3_mk_re_star(Z3_context c, Z3_ast re);
Z3_ast Z3_API Z3_mk_re_option(Z3_context c, Z3_ast re);
Z3_ast Z3_API Z3_mk_re_union(Z3_context c, unsigned n, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_re_concat(Z3_context c, unsigned n, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_re_range(Z3_context c, Z3_ast lo, Z3_ast hi);
Z3_ast Z3_API Z3_mk_re_loop(Z3_context c, Z3_ast r, unsigned lo, unsigned hi);
Z3_ast Z3_API Z3_mk_re_intersect(Z3_context c, unsigned n, Z3_ast const args[]);
Z3_ast Z3_API Z3_mk_re_complement(Z3_context c, Z3_ast re);
Z3_ast Z3_API Z3_mk_re_empty(Z3_context c, Z3_sort re);
Z3_ast Z3_API Z3_mk_re_full(Z3_context c, Z3_sort re);
Z3_pattern Z3_API Z3_mk_pattern(Z3_context c, unsigned num_patterns, Z3_ast const terms[]);
Z3_ast Z3_API Z3_mk_bound(Z3_context c, unsigned index, Z3_sort ty);
Z3_ast Z3_API Z3_mk_forall(Z3_context c, unsigned weight, unsigned num_patterns, Z3_pattern const patterns[], unsigned num_decls, Z3_sort const sorts[], Z3_symbol const decl_names[], Z3_ast body);
Z3_ast Z3_API Z3_mk_exists(Z3_context c, unsigned weight, unsigned num_patterns, Z3_pattern const patterns[], unsigned num_decls, Z3_sort const sorts[], Z3_symbol const decl_names[], Z3_ast body);
Z3_ast Z3_API Z3_mk_quantifier( Z3_context c, bool is_forall, unsigned weight, unsigned num_patterns, Z3_pattern const patterns[], unsigned num_decls, Z3_sort const sorts[], Z3_symbol const decl_names[], Z3_ast body);
Z3_ast Z3_API Z3_mk_quantifier_ex( Z3_context c, bool is_forall, unsigned weight, Z3_symbol quantifier_id, Z3_symbol skolem_id, unsigned num_patterns, Z3_pattern const patterns[], unsigned num_no_patterns, Z3_ast const no_patterns[], unsigned num_decls, Z3_sort const sorts[], Z3_symbol const decl_names[], Z3_ast body);
Z3_ast Z3_API Z3_mk_forall_const( Z3_context c, unsigned weight, unsigned num_bound, Z3_app const bound[], unsigned num_patterns, Z3_pattern const patterns[], Z3_ast body );
Z3_ast Z3_API Z3_mk_exists_const( Z3_context c, unsigned weight, unsigned num_bound, Z3_app const bound[], unsigned num_patterns, Z3_pattern const patterns[], Z3_ast body );
Z3_ast Z3_API Z3_mk_quantifier_const( Z3_context c, bool is_forall, unsigned weight, unsigned num_bound, Z3_app const bound[], unsigned num_patterns, Z3_pattern const patterns[], Z3_ast body );
Z3_ast Z3_API Z3_mk_quantifier_const_ex( Z3_context c, bool is_forall, unsigned weight, Z3_symbol quantifier_id, Z3_symbol skolem_id, unsigned num_bound, Z3_app const bound[], unsigned num_patterns, Z3_pattern const patterns[], unsigned num_no_patterns, Z3_ast const no_patterns[], Z3_ast body );
Z3_ast Z3_API Z3_mk_lambda(Z3_context c, unsigned num_decls, Z3_sort const sorts[], Z3_symbol const decl_names[], Z3_ast body);
Z3_ast Z3_API Z3_mk_lambda_const(Z3_context c, unsigned num_bound, Z3_app const bound[], Z3_ast body);
Z3_symbol_kind Z3_API Z3_get_symbol_kind(Z3_context c, Z3_symbol s);
int Z3_API Z3_get_symbol_int(Z3_context c, Z3_symbol s);
Z3_string Z3_API Z3_get_symbol_string(Z3_context c, Z3_symbol s);
Z3_symbol Z3_API Z3_get_sort_name(Z3_context c, Z3_sort d);
unsigned Z3_API Z3_get_sort_id(Z3_context c, Z3_sort s);
Z3_ast Z3_API Z3_sort_to_ast(Z3_context c, Z3_sort s);
bool Z3_API Z3_is_eq_sort(Z3_context c, Z3_sort s1, Z3_sort s2);
Z3_sort_kind Z3_API Z3_get_sort_kind(Z3_context c, Z3_sort t);
unsigned Z3_API Z3_get_bv_sort_size(Z3_context c, Z3_sort t);
Z3_bool_opt Z3_API Z3_get_finite_domain_sort_size(Z3_context c, Z3_sort s, uint64_t* r);
Z3_sort Z3_API Z3_get_array_sort_domain(Z3_context c, Z3_sort t);
Z3_sort Z3_API Z3_get_array_sort_range(Z3_context c, Z3_sort t);
Z3_func_decl Z3_API Z3_get_tuple_sort_mk_decl(Z3_context c, Z3_sort t);
unsigned Z3_API Z3_get_tuple_sort_num_fields(Z3_context c, Z3_sort t);
Z3_func_decl Z3_API Z3_get_tuple_sort_field_decl(Z3_context c, Z3_sort t, unsigned i);
unsigned Z3_API Z3_get_datatype_sort_num_constructors( Z3_context c, Z3_sort t);
Z3_func_decl Z3_API Z3_get_datatype_sort_constructor( Z3_context c, Z3_sort t, unsigned idx);
Z3_func_decl Z3_API Z3_get_datatype_sort_recognizer( Z3_context c, Z3_sort t, unsigned idx);
Z3_func_decl Z3_API Z3_get_datatype_sort_constructor_accessor(Z3_context c, Z3_sort t, unsigned idx_c, unsigned idx_a);
Z3_ast Z3_API Z3_datatype_update_field(Z3_context c, Z3_func_decl field_access, Z3_ast t, Z3_ast value);
unsigned Z3_API Z3_get_relation_arity(Z3_context c, Z3_sort s);
Z3_sort Z3_API Z3_get_relation_column(Z3_context c, Z3_sort s, unsigned col);
Z3_ast Z3_API Z3_mk_atmost(Z3_context c, unsigned num_args, Z3_ast const args[], unsigned k);
Z3_ast Z3_API Z3_mk_atleast(Z3_context c, unsigned num_args, Z3_ast const args[], unsigned k);
Z3_ast Z3_API Z3_mk_pble(Z3_context c, unsigned num_args, Z3_ast const args[], int const coeffs[], int k);
Z3_ast Z3_API Z3_mk_pbge(Z3_context c, unsigned num_args, Z3_ast const args[], int const coeffs[], int k);
Z3_ast Z3_API Z3_mk_pbeq(Z3_context c, unsigned num_args, Z3_ast const args[], int const coeffs[], int k);
Z3_ast Z3_API Z3_func_decl_to_ast(Z3_context c, Z3_func_decl f);
bool Z3_API Z3_is_eq_func_decl(Z3_context c, Z3_func_decl f1, Z3_func_decl f2);
unsigned Z3_API Z3_get_func_decl_id(Z3_context c, Z3_func_decl f);
Z3_symbol Z3_API Z3_get_decl_name(Z3_context c, Z3_func_decl d);
Z3_decl_kind Z3_API Z3_get_decl_kind(Z3_context c, Z3_func_decl d);
unsigned Z3_API Z3_get_domain_size(Z3_context c, Z3_func_decl d);
unsigned Z3_API Z3_get_arity(Z3_context c, Z3_func_decl d);
Z3_sort Z3_API Z3_get_domain(Z3_context c, Z3_func_decl d, unsigned i);
Z3_sort Z3_API Z3_get_range(Z3_context c, Z3_func_decl d);
unsigned Z3_API Z3_get_decl_num_parameters(Z3_context c, Z3_func_decl d);
Z3_parameter_kind Z3_API Z3_get_decl_parameter_kind(Z3_context c, Z3_func_decl d, unsigned idx);
int Z3_API Z3_get_decl_int_parameter(Z3_context c, Z3_func_decl d, unsigned idx);
double Z3_API Z3_get_decl_double_parameter(Z3_context c, Z3_func_decl d, unsigned idx);
Z3_symbol Z3_API Z3_get_decl_symbol_parameter(Z3_context c, Z3_func_decl d, unsigned idx);
Z3_sort Z3_API Z3_get_decl_sort_parameter(Z3_context c, Z3_func_decl d, unsigned idx);
Z3_ast Z3_API Z3_get_decl_ast_parameter(Z3_context c, Z3_func_decl d, unsigned idx);
Z3_func_decl Z3_API Z3_get_decl_func_decl_parameter(Z3_context c, Z3_func_decl d, unsigned idx);
Z3_string Z3_API Z3_get_decl_rational_parameter(Z3_context c, Z3_func_decl d, unsigned idx);
Z3_ast Z3_API Z3_app_to_ast(Z3_context c, Z3_app a);
Z3_func_decl Z3_API Z3_get_app_decl(Z3_context c, Z3_app a);
unsigned Z3_API Z3_get_app_num_args(Z3_context c, Z3_app a);
Z3_ast Z3_API Z3_get_app_arg(Z3_context c, Z3_app a, unsigned i);
bool Z3_API Z3_is_eq_ast(Z3_context c, Z3_ast t1, Z3_ast t2);
unsigned Z3_API Z3_get_ast_id(Z3_context c, Z3_ast t);
unsigned Z3_API Z3_get_ast_hash(Z3_context c, Z3_ast a);
Z3_sort Z3_API Z3_get_sort(Z3_context c, Z3_ast a);
bool Z3_API Z3_is_well_sorted(Z3_context c, Z3_ast t);
Z3_lbool Z3_API Z3_get_bool_value(Z3_context c, Z3_ast a);
Z3_ast_kind Z3_API Z3_get_ast_kind(Z3_context c, Z3_ast a);
bool Z3_API Z3_is_app(Z3_context c, Z3_ast a);
bool Z3_API Z3_is_numeral_ast(Z3_context c, Z3_ast a);
bool Z3_API Z3_is_algebraic_number(Z3_context c, Z3_ast a);
Z3_app Z3_API Z3_to_app(Z3_context c, Z3_ast a);
Z3_func_decl Z3_API Z3_to_func_decl(Z3_context c, Z3_ast a);
Z3_string Z3_API Z3_get_numeral_string(Z3_context c, Z3_ast a);
Z3_string Z3_API Z3_get_numeral_decimal_string(Z3_context c, Z3_ast a, unsigned precision);
double Z3_API Z3_get_numeral_double(Z3_context c, Z3_ast a);
Z3_ast Z3_API Z3_get_numerator(Z3_context c, Z3_ast a);
Z3_ast Z3_API Z3_get_denominator(Z3_context c, Z3_ast a);
bool Z3_API Z3_get_numeral_small(Z3_context c, Z3_ast a, int64_t* num, int64_t* den);
bool Z3_API Z3_get_numeral_int(Z3_context c, Z3_ast v, int* i);
bool Z3_API Z3_get_numeral_uint(Z3_context c, Z3_ast v, unsigned* u);
bool Z3_API Z3_get_numeral_uint64(Z3_context c, Z3_ast v, uint64_t* u);
bool Z3_API Z3_get_numeral_int64(Z3_context c, Z3_ast v, int64_t* i);
bool Z3_API Z3_get_numeral_rational_int64(Z3_context c, Z3_ast v, int64_t* num, int64_t* den);
Z3_ast Z3_API Z3_get_algebraic_number_lower(Z3_context c, Z3_ast a, unsigned precision);
Z3_ast Z3_API Z3_get_algebraic_number_upper(Z3_context c, Z3_ast a, unsigned precision);
Z3_ast Z3_API Z3_pattern_to_ast(Z3_context c, Z3_pattern p);
unsigned Z3_API Z3_get_pattern_num_terms(Z3_context c, Z3_pattern p);
Z3_ast Z3_API Z3_get_pattern(Z3_context c, Z3_pattern p, unsigned idx);
unsigned Z3_API Z3_get_index_value(Z3_context c, Z3_ast a);
bool Z3_API Z3_is_quantifier_forall(Z3_context c, Z3_ast a);
bool Z3_API Z3_is_quantifier_exists(Z3_context c, Z3_ast a);
bool Z3_API Z3_is_lambda(Z3_context c, Z3_ast a);
unsigned Z3_API Z3_get_quantifier_weight(Z3_context c, Z3_ast a);
unsigned Z3_API Z3_get_quantifier_num_patterns(Z3_context c, Z3_ast a);
Z3_pattern Z3_API Z3_get_quantifier_pattern_ast(Z3_context c, Z3_ast a, unsigned i);
unsigned Z3_API Z3_get_quantifier_num_no_patterns(Z3_context c, Z3_ast a);
Z3_ast Z3_API Z3_get_quantifier_no_pattern_ast(Z3_context c, Z3_ast a, unsigned i);
unsigned Z3_API Z3_get_quantifier_num_bound(Z3_context c, Z3_ast a);
Z3_symbol Z3_API Z3_get_quantifier_bound_name(Z3_context c, Z3_ast a, unsigned i);
Z3_sort Z3_API Z3_get_quantifier_bound_sort(Z3_context c, Z3_ast a, unsigned i);
Z3_ast Z3_API Z3_get_quantifier_body(Z3_context c, Z3_ast a);
Z3_ast Z3_API Z3_simplify(Z3_context c, Z3_ast a);
Z3_ast Z3_API Z3_simplify_ex(Z3_context c, Z3_ast a, Z3_params p);
Z3_string Z3_API Z3_simplify_get_help(Z3_context c);
Z3_param_descrs Z3_API Z3_simplify_get_param_descrs(Z3_context c);
Z3_ast Z3_API Z3_update_term(Z3_context c, Z3_ast a, unsigned num_args, Z3_ast const args[]);
Z3_ast Z3_API Z3_substitute(Z3_context c, Z3_ast a, unsigned num_exprs, Z3_ast const from[], Z3_ast const to[]);
Z3_ast Z3_API Z3_substitute_vars(Z3_context c, Z3_ast a, unsigned num_exprs, Z3_ast const to[]);
Z3_ast Z3_API Z3_translate(Z3_context source, Z3_ast a, Z3_context target);
Z3_model Z3_API Z3_mk_model(Z3_context c);
void Z3_API Z3_model_inc_ref(Z3_context c, Z3_model m);
void Z3_API Z3_model_dec_ref(Z3_context c, Z3_model m);
Z3_bool_opt Z3_API Z3_model_eval(Z3_context c, Z3_model m, Z3_ast t, bool model_completion, Z3_ast * v);
Z3_ast_opt Z3_API Z3_model_get_const_interp(Z3_context c, Z3_model m, Z3_func_decl a);
bool Z3_API Z3_model_has_interp(Z3_context c, Z3_model m, Z3_func_decl a);
Z3_func_interp_opt Z3_API Z3_model_get_func_interp(Z3_context c, Z3_model m, Z3_func_decl f);
unsigned Z3_API Z3_model_get_num_consts(Z3_context c, Z3_model m);
Z3_func_decl Z3_API Z3_model_get_const_decl(Z3_context c, Z3_model m, unsigned i);
unsigned Z3_API Z3_model_get_num_funcs(Z3_context c, Z3_model m);
Z3_func_decl Z3_API Z3_model_get_func_decl(Z3_context c, Z3_model m, unsigned i);
unsigned Z3_API Z3_model_get_num_sorts(Z3_context c, Z3_model m);
Z3_sort Z3_API Z3_model_get_sort(Z3_context c, Z3_model m, unsigned i);
Z3_ast_vector Z3_API Z3_model_get_sort_universe(Z3_context c, Z3_model m, Z3_sort s);
Z3_model Z3_API Z3_model_translate(Z3_context c, Z3_model m, Z3_context dst);
bool Z3_API Z3_is_as_array(Z3_context c, Z3_ast a);
Z3_func_decl Z3_API Z3_get_as_array_func_decl(Z3_context c, Z3_ast a);
Z3_func_interp Z3_API Z3_add_func_interp(Z3_context c, Z3_model m, Z3_func_decl f, Z3_ast default_value);
void Z3_API Z3_add_const_interp(Z3_context c, Z3_model m, Z3_func_decl f, Z3_ast a);
void Z3_API Z3_func_interp_inc_ref(Z3_context c, Z3_func_interp f);
void Z3_API Z3_func_interp_dec_ref(Z3_context c, Z3_func_interp f);
unsigned Z3_API Z3_func_interp_get_num_entries(Z3_context c, Z3_func_interp f);
Z3_func_entry Z3_API Z3_func_interp_get_entry(Z3_context c, Z3_func_interp f, unsigned i);
Z3_ast Z3_API Z3_func_interp_get_else(Z3_context c, Z3_func_interp f);
void Z3_API Z3_func_interp_set_else(Z3_context c, Z3_func_interp f, Z3_ast else_value);
unsigned Z3_API Z3_func_interp_get_arity(Z3_context c, Z3_func_interp f);
void Z3_API Z3_func_interp_add_entry(Z3_context c, Z3_func_interp fi, Z3_ast_vector args, Z3_ast value);
void Z3_API Z3_func_entry_inc_ref(Z3_context c, Z3_func_entry e);
void Z3_API Z3_func_entry_dec_ref(Z3_context c, Z3_func_entry e);
Z3_ast Z3_API Z3_func_entry_get_value(Z3_context c, Z3_func_entry e);
unsigned Z3_API Z3_func_entry_get_num_args(Z3_context c, Z3_func_entry e);
Z3_ast Z3_API Z3_func_entry_get_arg(Z3_context c, Z3_func_entry e, unsigned i);
bool Z3_API Z3_open_log(Z3_string filename);
void Z3_API Z3_append_log(Z3_string string);
void Z3_API Z3_close_log(void);
void Z3_API Z3_toggle_warning_messages(bool enabled);
void Z3_API Z3_set_ast_print_mode(Z3_context c, Z3_ast_print_mode mode);
Z3_string Z3_API Z3_ast_to_string(Z3_context c, Z3_ast a);
Z3_string Z3_API Z3_pattern_to_string(Z3_context c, Z3_pattern p);
Z3_string Z3_API Z3_sort_to_string(Z3_context c, Z3_sort s);
Z3_string Z3_API Z3_func_decl_to_string(Z3_context c, Z3_func_decl d);
Z3_string Z3_API Z3_model_to_string(Z3_context c, Z3_model m);
Z3_string Z3_API Z3_benchmark_to_smtlib_string(Z3_context c, Z3_string name, Z3_string logic, Z3_string status, Z3_string attributes, unsigned num_assumptions, Z3_ast const assumptions[], Z3_ast formula);
Z3_ast_vector Z3_API Z3_parse_smtlib2_string(Z3_context c, Z3_string str, unsigned num_sorts, Z3_symbol const sort_names[], Z3_sort const sorts[], unsigned num_decls, Z3_symbol const decl_names[], Z3_func_decl const decls[]);
Z3_ast_vector Z3_API Z3_parse_smtlib2_file(Z3_context c, Z3_string file_name, unsigned num_sorts, Z3_symbol const sort_names[], Z3_sort const sorts[], unsigned num_decls, Z3_symbol const decl_names[], Z3_func_decl const decls[]);
Z3_string Z3_API Z3_eval_smtlib2_string(Z3_context, Z3_string str);
Z3_error_code Z3_API Z3_get_error_code(Z3_context c);
void Z3_API Z3_set_error_handler(Z3_context c, Z3_error_handler h);
void Z3_API Z3_set_error(Z3_context c, Z3_error_code e);
Z3_string Z3_API Z3_get_error_msg(Z3_context c, Z3_error_code err);
void Z3_API Z3_get_version(unsigned * major, unsigned * minor, unsigned * build_number, unsigned * revision_number);
Z3_string Z3_API Z3_get_full_version(void);
void Z3_API Z3_enable_trace(Z3_string tag);
void Z3_API Z3_disable_trace(Z3_string tag);
void Z3_API Z3_reset_memory(void);
void Z3_API Z3_finalize_memory(void);
Z3_goal Z3_API Z3_mk_goal(Z3_context c, bool models, bool unsat_cores, bool proofs);
void Z3_API Z3_goal_inc_ref(Z3_context c, Z3_goal g);
void Z3_API Z3_goal_dec_ref(Z3_context c, Z3_goal g);
Z3_goal_prec Z3_API Z3_goal_precision(Z3_context c, Z3_goal g);
void Z3_API Z3_goal_assert(Z3_context c, Z3_goal g, Z3_ast a);
bool Z3_API Z3_goal_inconsistent(Z3_context c, Z3_goal g);
unsigned Z3_API Z3_goal_depth(Z3_context c, Z3_goal g);
void Z3_API Z3_goal_reset(Z3_context c, Z3_goal g);
unsigned Z3_API Z3_goal_size(Z3_context c, Z3_goal g);
Z3_ast Z3_API Z3_goal_formula(Z3_context c, Z3_goal g, unsigned idx);
unsigned Z3_API Z3_goal_num_exprs(Z3_context c, Z3_goal g);
bool Z3_API Z3_goal_is_decided_sat(Z3_context c, Z3_goal g);
bool Z3_API Z3_goal_is_decided_unsat(Z3_context c, Z3_goal g);
Z3_goal Z3_API Z3_goal_translate(Z3_context source, Z3_goal g, Z3_context target);
Z3_model Z3_API Z3_goal_convert_model(Z3_context c, Z3_goal g, Z3_model m);
Z3_string Z3_API Z3_goal_to_string(Z3_context c, Z3_goal g);
Z3_string Z3_API Z3_goal_to_dimacs_string(Z3_context c, Z3_goal g);
Z3_tactic Z3_API Z3_mk_tactic(Z3_context c, Z3_string name);
void Z3_API Z3_tactic_inc_ref(Z3_context c, Z3_tactic t);
void Z3_API Z3_tactic_dec_ref(Z3_context c, Z3_tactic g);
Z3_probe Z3_API Z3_mk_probe(Z3_context c, Z3_string name);
void Z3_API Z3_probe_inc_ref(Z3_context c, Z3_probe p);
void Z3_API Z3_probe_dec_ref(Z3_context c, Z3_probe p);
Z3_tactic Z3_API Z3_tactic_and_then(Z3_context c, Z3_tactic t1, Z3_tactic t2);
Z3_tactic Z3_API Z3_tactic_or_else(Z3_context c, Z3_tactic t1, Z3_tactic t2);
Z3_tactic Z3_API Z3_tactic_par_or(Z3_context c, unsigned num, Z3_tactic const ts[]);
Z3_tactic Z3_API Z3_tactic_par_and_then(Z3_context c, Z3_tactic t1, Z3_tactic t2);
Z3_tactic Z3_API Z3_tactic_try_for(Z3_context c, Z3_tactic t, unsigned ms);
Z3_tactic Z3_API Z3_tactic_when(Z3_context c, Z3_probe p, Z3_tactic t);
Z3_tactic Z3_API Z3_tactic_cond(Z3_context c, Z3_probe p, Z3_tactic t1, Z3_tactic t2);
Z3_tactic Z3_API Z3_tactic_repeat(Z3_context c, Z3_tactic t, unsigned max);
Z3_tactic Z3_API Z3_tactic_skip(Z3_context c);
Z3_tactic Z3_API Z3_tactic_fail(Z3_context c);
Z3_tactic Z3_API Z3_tactic_fail_if(Z3_context c, Z3_probe p);
Z3_tactic Z3_API Z3_tactic_fail_if_not_decided(Z3_context c);
Z3_tactic Z3_API Z3_tactic_using_params(Z3_context c, Z3_tactic t, Z3_params p);
Z3_probe Z3_API Z3_probe_const(Z3_context x, double val);
Z3_probe Z3_API Z3_probe_lt(Z3_context x, Z3_probe p1, Z3_probe p2);
Z3_probe Z3_API Z3_probe_gt(Z3_context x, Z3_probe p1, Z3_probe p2);
Z3_probe Z3_API Z3_probe_le(Z3_context x, Z3_probe p1, Z3_probe p2);
Z3_probe Z3_API Z3_probe_ge(Z3_context x, Z3_probe p1, Z3_probe p2);
Z3_probe Z3_API Z3_probe_eq(Z3_context x, Z3_probe p1, Z3_probe p2);
Z3_probe Z3_API Z3_probe_and(Z3_context x, Z3_probe p1, Z3_probe p2);
Z3_probe Z3_API Z3_probe_or(Z3_context x, Z3_probe p1, Z3_probe p2);
Z3_probe Z3_API Z3_probe_not(Z3_context x, Z3_probe p);
unsigned Z3_API Z3_get_num_tactics(Z3_context c);
Z3_string Z3_API Z3_get_tactic_name(Z3_context c, unsigned i);
unsigned Z3_API Z3_get_num_probes(Z3_context c);
Z3_string Z3_API Z3_get_probe_name(Z3_context c, unsigned i);
Z3_string Z3_API Z3_tactic_get_help(Z3_context c, Z3_tactic t);
Z3_param_descrs Z3_API Z3_tactic_get_param_descrs(Z3_context c, Z3_tactic t);
Z3_string Z3_API Z3_tactic_get_descr(Z3_context c, Z3_string name);
Z3_string Z3_API Z3_probe_get_descr(Z3_context c, Z3_string name);
double Z3_API Z3_probe_apply(Z3_context c, Z3_probe p, Z3_goal g);
Z3_apply_result Z3_API Z3_tactic_apply(Z3_context c, Z3_tactic t, Z3_goal g);
Z3_apply_result Z3_API Z3_tactic_apply_ex(Z3_context c, Z3_tactic t, Z3_goal g, Z3_params p);
void Z3_API Z3_apply_result_inc_ref(Z3_context c, Z3_apply_result r);
void Z3_API Z3_apply_result_dec_ref(Z3_context c, Z3_apply_result r);
Z3_string Z3_API Z3_apply_result_to_string(Z3_context c, Z3_apply_result r);
unsigned Z3_API Z3_apply_result_get_num_subgoals(Z3_context c, Z3_apply_result r);
Z3_goal Z3_API Z3_apply_result_get_subgoal(Z3_context c, Z3_apply_result r, unsigned i);
Z3_solver Z3_API Z3_mk_solver(Z3_context c);
Z3_solver Z3_API Z3_mk_simple_solver(Z3_context c);
Z3_solver Z3_API Z3_mk_solver_for_logic(Z3_context c, Z3_symbol logic);
Z3_solver Z3_API Z3_mk_solver_from_tactic(Z3_context c, Z3_tactic t);
Z3_solver Z3_API Z3_solver_translate(Z3_context source, Z3_solver s, Z3_context target);
void Z3_API Z3_solver_import_model_converter(Z3_context ctx, Z3_solver src, Z3_solver dst);
Z3_string Z3_API Z3_solver_get_help(Z3_context c, Z3_solver s);
Z3_param_descrs Z3_API Z3_solver_get_param_descrs(Z3_context c, Z3_solver s);
void Z3_API Z3_solver_set_params(Z3_context c, Z3_solver s, Z3_params p);
void Z3_API Z3_solver_inc_ref(Z3_context c, Z3_solver s);
void Z3_API Z3_solver_dec_ref(Z3_context c, Z3_solver s);
void Z3_API Z3_solver_push(Z3_context c, Z3_solver s);
void Z3_API Z3_solver_pop(Z3_context c, Z3_solver s, unsigned n);
void Z3_API Z3_solver_reset(Z3_context c, Z3_solver s);
unsigned Z3_API Z3_solver_get_num_scopes(Z3_context c, Z3_solver s);
void Z3_API Z3_solver_assert(Z3_context c, Z3_solver s, Z3_ast a);
void Z3_API Z3_solver_assert_and_track(Z3_context c, Z3_solver s, Z3_ast a, Z3_ast p);
void Z3_API Z3_solver_from_file(Z3_context c, Z3_solver s, Z3_string file_name);
void Z3_API Z3_solver_from_string(Z3_context c, Z3_solver s, Z3_string file_name);
Z3_ast_vector Z3_API Z3_solver_get_assertions(Z3_context c, Z3_solver s);
Z3_ast_vector Z3_API Z3_solver_get_units(Z3_context c, Z3_solver s);
Z3_ast_vector Z3_API Z3_solver_get_non_units(Z3_context c, Z3_solver s);
Z3_lbool Z3_API Z3_solver_check(Z3_context c, Z3_solver s);
Z3_lbool Z3_API Z3_solver_check_assumptions(Z3_context c, Z3_solver s, unsigned num_assumptions, Z3_ast const assumptions[]);
Z3_lbool Z3_API Z3_get_implied_equalities(Z3_context c, Z3_solver s, unsigned num_terms, Z3_ast const terms[], unsigned class_ids[]);
Z3_lbool Z3_API Z3_solver_get_consequences(Z3_context c, Z3_solver s, Z3_ast_vector assumptions, Z3_ast_vector variables, Z3_ast_vector consequences);
Z3_ast_vector Z3_API Z3_solver_cube(Z3_context c, Z3_solver s, Z3_ast_vector vars, unsigned backtrack_level);
Z3_model Z3_API Z3_solver_get_model(Z3_context c, Z3_solver s);
Z3_ast Z3_API Z3_solver_get_proof(Z3_context c, Z3_solver s);
Z3_ast_vector Z3_API Z3_solver_get_unsat_core(Z3_context c, Z3_solver s);
Z3_string Z3_API Z3_solver_get_reason_unknown(Z3_context c, Z3_solver s);
Z3_stats Z3_API Z3_solver_get_statistics(Z3_context c, Z3_solver s);
Z3_string Z3_API Z3_solver_to_string(Z3_context c, Z3_solver s);
Z3_string Z3_API Z3_stats_to_string(Z3_context c, Z3_stats s);
void Z3_API Z3_stats_inc_ref(Z3_context c, Z3_stats s);
void Z3_API Z3_stats_dec_ref(Z3_context c, Z3_stats s);
unsigned Z3_API Z3_stats_size(Z3_context c, Z3_stats s);
Z3_string Z3_API Z3_stats_get_key(Z3_context c, Z3_stats s, unsigned idx);
bool Z3_API Z3_stats_is_uint(Z3_context c, Z3_stats s, unsigned idx);
bool Z3_API Z3_stats_is_double(Z3_context c, Z3_stats s, unsigned idx);
unsigned Z3_API Z3_stats_get_uint_value(Z3_context c, Z3_stats s, unsigned idx);
double Z3_API Z3_stats_get_double_value(Z3_context c, Z3_stats s, unsigned idx);
uint64_t Z3_API Z3_get_estimated_alloc_size(void);
Z3_sort Z3_API Z3_mk_fpa_rounding_mode_sort(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_round_nearest_ties_to_even(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_rne(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_round_nearest_ties_to_away(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_rna(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_round_toward_positive(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_rtp(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_round_toward_negative(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_rtn(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_round_toward_zero(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_rtz(Z3_context c);
Z3_sort Z3_API Z3_mk_fpa_sort(Z3_context c, unsigned ebits, unsigned sbits);
Z3_sort Z3_API Z3_mk_fpa_sort_half(Z3_context c);
Z3_sort Z3_API Z3_mk_fpa_sort_16(Z3_context c);
Z3_sort Z3_API Z3_mk_fpa_sort_single(Z3_context c);
Z3_sort Z3_API Z3_mk_fpa_sort_32(Z3_context c);
Z3_sort Z3_API Z3_mk_fpa_sort_double(Z3_context c);
Z3_sort Z3_API Z3_mk_fpa_sort_64(Z3_context c);
Z3_sort Z3_API Z3_mk_fpa_sort_quadruple(Z3_context c);
Z3_sort Z3_API Z3_mk_fpa_sort_128(Z3_context c);
Z3_ast Z3_API Z3_mk_fpa_nan(Z3_context c, Z3_sort s);
Z3_ast Z3_API Z3_mk_fpa_inf(Z3_context c, Z3_sort s, bool negative);
Z3_ast Z3_API Z3_mk_fpa_zero(Z3_context c, Z3_sort s, bool negative);
Z3_ast Z3_API Z3_mk_fpa_fp(Z3_context c, Z3_ast sgn, Z3_ast exp, Z3_ast sig);
Z3_ast Z3_API Z3_mk_fpa_numeral_float(Z3_context c, float v, Z3_sort ty);
Z3_ast Z3_API Z3_mk_fpa_numeral_double(Z3_context c, double v, Z3_sort ty);
Z3_ast Z3_API Z3_mk_fpa_numeral_int(Z3_context c, signed v, Z3_sort ty);
Z3_ast Z3_API Z3_mk_fpa_numeral_int_uint(Z3_context c, bool sgn, signed exp, unsigned sig, Z3_sort ty);
Z3_ast Z3_API Z3_mk_fpa_numeral_int64_uint64(Z3_context c, bool sgn, int64_t exp, uint64_t sig, Z3_sort ty);
Z3_ast Z3_API Z3_mk_fpa_abs(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_neg(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_add(Z3_context c, Z3_ast rm, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_sub(Z3_context c, Z3_ast rm, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_mul(Z3_context c, Z3_ast rm, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_div(Z3_context c, Z3_ast rm, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_fma(Z3_context c, Z3_ast rm, Z3_ast t1, Z3_ast t2, Z3_ast t3);
Z3_ast Z3_API Z3_mk_fpa_sqrt(Z3_context c, Z3_ast rm, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_rem(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_round_to_integral(Z3_context c, Z3_ast rm, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_min(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_max(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_leq(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_lt(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_geq(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_gt(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_eq(Z3_context c, Z3_ast t1, Z3_ast t2);
Z3_ast Z3_API Z3_mk_fpa_is_normal(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_is_subnormal(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_is_zero(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_is_infinite(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_is_nan(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_is_negative(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_is_positive(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_to_fp_bv(Z3_context c, Z3_ast bv, Z3_sort s);
Z3_ast Z3_API Z3_mk_fpa_to_fp_float(Z3_context c, Z3_ast rm, Z3_ast t, Z3_sort s);
Z3_ast Z3_API Z3_mk_fpa_to_fp_real(Z3_context c, Z3_ast rm, Z3_ast t, Z3_sort s);
Z3_ast Z3_API Z3_mk_fpa_to_fp_signed(Z3_context c, Z3_ast rm, Z3_ast t, Z3_sort s);
Z3_ast Z3_API Z3_mk_fpa_to_fp_unsigned(Z3_context c, Z3_ast rm, Z3_ast t, Z3_sort s);
Z3_ast Z3_API Z3_mk_fpa_to_ubv(Z3_context c, Z3_ast rm, Z3_ast t, unsigned sz);
Z3_ast Z3_API Z3_mk_fpa_to_sbv(Z3_context c, Z3_ast rm, Z3_ast t, unsigned sz);
Z3_ast Z3_API Z3_mk_fpa_to_real(Z3_context c, Z3_ast t);
unsigned Z3_API Z3_fpa_get_ebits(Z3_context c, Z3_sort s);
unsigned Z3_API Z3_fpa_get_sbits(Z3_context c, Z3_sort s);
bool Z3_API Z3_fpa_is_numeral_nan(Z3_context c, Z3_ast t);
bool Z3_API Z3_fpa_is_numeral_inf(Z3_context c, Z3_ast t);
bool Z3_API Z3_fpa_is_numeral_zero(Z3_context c, Z3_ast t);
bool Z3_API Z3_fpa_is_numeral_normal(Z3_context c, Z3_ast t);
bool Z3_API Z3_fpa_is_numeral_subnormal(Z3_context c, Z3_ast t);
bool Z3_API Z3_fpa_is_numeral_positive(Z3_context c, Z3_ast t);
bool Z3_API Z3_fpa_is_numeral_negative(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_fpa_get_numeral_sign_bv(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_fpa_get_numeral_significand_bv(Z3_context c, Z3_ast t);
bool Z3_API Z3_fpa_get_numeral_sign(Z3_context c, Z3_ast t, int * sgn);
Z3_string Z3_API Z3_fpa_get_numeral_significand_string(Z3_context c, Z3_ast t);
bool Z3_API Z3_fpa_get_numeral_significand_uint64(Z3_context c, Z3_ast t, uint64_t * n);
Z3_string Z3_API Z3_fpa_get_numeral_exponent_string(Z3_context c, Z3_ast t, bool biased);
bool Z3_API Z3_fpa_get_numeral_exponent_int64(Z3_context c, Z3_ast t, int64_t * n, bool biased);
Z3_ast Z3_API Z3_fpa_get_numeral_exponent_bv(Z3_context c, Z3_ast t, bool biased);
Z3_ast Z3_API Z3_mk_fpa_to_ieee_bv(Z3_context c, Z3_ast t);
Z3_ast Z3_API Z3_mk_fpa_to_fp_int_real(Z3_context c, Z3_ast rm, Z3_ast exp, Z3_ast sig, Z3_sort s);
bool Z3_API Z3_algebraic_is_value(Z3_context c, Z3_ast a);
bool Z3_API Z3_algebraic_is_pos(Z3_context c, Z3_ast a);
bool Z3_API Z3_algebraic_is_neg(Z3_context c, Z3_ast a);
bool Z3_API Z3_algebraic_is_zero(Z3_context c, Z3_ast a);
int Z3_API Z3_algebraic_sign(Z3_context c, Z3_ast a);
Z3_ast Z3_API Z3_algebraic_add(Z3_context c, Z3_ast a, Z3_ast b);
Z3_ast Z3_API Z3_algebraic_sub(Z3_context c, Z3_ast a, Z3_ast b);
Z3_ast Z3_API Z3_algebraic_mul(Z3_context c, Z3_ast a, Z3_ast b);
Z3_ast Z3_API Z3_algebraic_div(Z3_context c, Z3_ast a, Z3_ast b);
Z3_ast Z3_API Z3_algebraic_root(Z3_context c, Z3_ast a, unsigned k);
Z3_ast Z3_API Z3_algebraic_power(Z3_context c, Z3_ast a, unsigned k);
bool Z3_API Z3_algebraic_lt(Z3_context c, Z3_ast a, Z3_ast b);
bool Z3_API Z3_algebraic_gt(Z3_context c, Z3_ast a, Z3_ast b);
bool Z3_API Z3_algebraic_le(Z3_context c, Z3_ast a, Z3_ast b);
bool Z3_API Z3_algebraic_ge(Z3_context c, Z3_ast a, Z3_ast b);
bool Z3_API Z3_algebraic_eq(Z3_context c, Z3_ast a, Z3_ast b);
bool Z3_API Z3_algebraic_neq(Z3_context c, Z3_ast a, Z3_ast b);
Z3_ast_vector Z3_API Z3_algebraic_roots(Z3_context c, Z3_ast p, unsigned n, Z3_ast a[]);
int Z3_API Z3_algebraic_eval(Z3_context c, Z3_ast p, unsigned n, Z3_ast a[]);
Z3_ast_vector Z3_API Z3_mk_ast_vector(Z3_context c);
void Z3_API Z3_ast_vector_inc_ref(Z3_context c, Z3_ast_vector v);
void Z3_API Z3_ast_vector_dec_ref(Z3_context c, Z3_ast_vector v);
unsigned Z3_API Z3_ast_vector_size(Z3_context c, Z3_ast_vector v);
Z3_ast Z3_API Z3_ast_vector_get(Z3_context c, Z3_ast_vector v, unsigned i);
void Z3_API Z3_ast_vector_set(Z3_context c, Z3_ast_vector v, unsigned i, Z3_ast a);
void Z3_API Z3_ast_vector_resize(Z3_context c, Z3_ast_vector v, unsigned n);
void Z3_API Z3_ast_vector_push(Z3_context c, Z3_ast_vector v, Z3_ast a);
Z3_ast_vector Z3_API Z3_ast_vector_translate(Z3_context s, Z3_ast_vector v, Z3_context t);
Z3_string Z3_API Z3_ast_vector_to_string(Z3_context c, Z3_ast_vector v);
Z3_ast_map Z3_API Z3_mk_ast_map(Z3_context c);
void Z3_API Z3_ast_map_inc_ref(Z3_context c, Z3_ast_map m);
void Z3_API Z3_ast_map_dec_ref(Z3_context c, Z3_ast_map m);
bool Z3_API Z3_ast_map_contains(Z3_context c, Z3_ast_map m, Z3_ast k);
Z3_ast Z3_API Z3_ast_map_find(Z3_context c, Z3_ast_map m, Z3_ast k);
void Z3_API Z3_ast_map_insert(Z3_context c, Z3_ast_map m, Z3_ast k, Z3_ast v);
void Z3_API Z3_ast_map_erase(Z3_context c, Z3_ast_map m, Z3_ast k);
void Z3_API Z3_ast_map_reset(Z3_context c, Z3_ast_map m);
unsigned Z3_API Z3_ast_map_size(Z3_context c, Z3_ast_map m);
Z3_ast_vector Z3_API Z3_ast_map_keys(Z3_context c, Z3_ast_map m);
Z3_string Z3_API Z3_ast_map_to_string(Z3_context c, Z3_ast_map m);
Z3_optimize Z3_API Z3_mk_optimize(Z3_context c);
void Z3_API Z3_optimize_inc_ref(Z3_context c, Z3_optimize d);
void Z3_API Z3_optimize_dec_ref(Z3_context c, Z3_optimize d);
void Z3_API Z3_optimize_assert(Z3_context c, Z3_optimize o, Z3_ast a);
unsigned Z3_API Z3_optimize_assert_soft(Z3_context c, Z3_optimize o, Z3_ast a, Z3_string weight, Z3_symbol id);
unsigned Z3_API Z3_optimize_maximize(Z3_context c, Z3_optimize o, Z3_ast t);
unsigned Z3_API Z3_optimize_minimize(Z3_context c, Z3_optimize o, Z3_ast t);
void Z3_API Z3_optimize_push(Z3_context c, Z3_optimize d);
void Z3_API Z3_optimize_pop(Z3_context c, Z3_optimize d);
Z3_lbool Z3_API Z3_optimize_check(Z3_context c, Z3_optimize o, unsigned num_assumptions, Z3_ast const assumptions[]);
Z3_string Z3_API Z3_optimize_get_reason_unknown(Z3_context c, Z3_optimize d);
Z3_model Z3_API Z3_optimize_get_model(Z3_context c, Z3_optimize o);
Z3_ast_vector Z3_API Z3_optimize_get_unsat_core(Z3_context c, Z3_optimize o);
void Z3_API Z3_optimize_set_params(Z3_context c, Z3_optimize o, Z3_params p);
Z3_param_descrs Z3_API Z3_optimize_get_param_descrs(Z3_context c, Z3_optimize o);
Z3_ast Z3_API Z3_optimize_get_lower(Z3_context c, Z3_optimize o, unsigned idx);
Z3_ast Z3_API Z3_optimize_get_upper(Z3_context c, Z3_optimize o, unsigned idx);
Z3_ast_vector Z3_API Z3_optimize_get_lower_as_vector(Z3_context c, Z3_optimize o, unsigned idx);
Z3_ast_vector Z3_API Z3_optimize_get_upper_as_vector(Z3_context c, Z3_optimize o, unsigned idx);
Z3_string Z3_API Z3_optimize_to_string(Z3_context c, Z3_optimize o);
void Z3_API Z3_optimize_from_string(Z3_context c, Z3_optimize o, Z3_string s);
void Z3_API Z3_optimize_from_file(Z3_context c, Z3_optimize o, Z3_string s);
Z3_string Z3_API Z3_optimize_get_help(Z3_context c, Z3_optimize t);
Z3_stats Z3_API Z3_optimize_get_statistics(Z3_context c, Z3_optimize d);
Z3_ast_vector Z3_API Z3_optimize_get_assertions(Z3_context c, Z3_optimize o);
Z3_ast_vector Z3_API Z3_optimize_get_objectives(Z3_context c, Z3_optimize o);
void Z3_API Z3_rcf_del(Z3_context c, Z3_rcf_num a);
Z3_rcf_num Z3_API Z3_rcf_mk_rational(Z3_context c, Z3_string val);
Z3_rcf_num Z3_API Z3_rcf_mk_small_int(Z3_context c, int val);
Z3_rcf_num Z3_API Z3_rcf_mk_pi(Z3_context c);
Z3_rcf_num Z3_API Z3_rcf_mk_e(Z3_context c);
Z3_rcf_num Z3_API Z3_rcf_mk_infinitesimal(Z3_context c);
unsigned Z3_API Z3_rcf_mk_roots(Z3_context c, unsigned n, Z3_rcf_num const a[], Z3_rcf_num roots[]);
Z3_rcf_num Z3_API Z3_rcf_add(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);
Z3_rcf_num Z3_API Z3_rcf_sub(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);
Z3_rcf_num Z3_API Z3_rcf_mul(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);
Z3_rcf_num Z3_API Z3_rcf_div(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);
Z3_rcf_num Z3_API Z3_rcf_neg(Z3_context c, Z3_rcf_num a);
Z3_rcf_num Z3_API Z3_rcf_inv(Z3_context c, Z3_rcf_num a);
Z3_rcf_num Z3_API Z3_rcf_power(Z3_context c, Z3_rcf_num a, unsigned k);
bool Z3_API Z3_rcf_lt(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);
bool Z3_API Z3_rcf_gt(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);
bool Z3_API Z3_rcf_le(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);
bool Z3_API Z3_rcf_ge(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);
bool Z3_API Z3_rcf_eq(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);
bool Z3_API Z3_rcf_neq(Z3_context c, Z3_rcf_num a, Z3_rcf_num b);
Z3_string Z3_API Z3_rcf_num_to_string(Z3_context c, Z3_rcf_num a, bool compact, bool html);
Z3_string Z3_API Z3_rcf_num_to_decimal_string(Z3_context c, Z3_rcf_num a, unsigned prec);
void Z3_API Z3_rcf_get_numerator_denominator(Z3_context c, Z3_rcf_num a, Z3_rcf_num * n, Z3_rcf_num * d);
